{"version":3,"sources":["particles.js","components/FaceRecognition/FaceRecognition.js","components/ImageLinkForm/ImageLinkForm.js","App.js","serviceWorker.js","index.js"],"names":["params","fps_limit","particles","number","value","density","enable","line_linked","distance","opacity","move","speed","anim","opacity_min","sync","color","polygon","scale","type","radius","url","inline","arrangement","draw","stroke","retina_detect","interactivity","events","onhover","mode","modes","bubble","size","FaceRecognition","_ref","imageUrl","faceBoxes","boxes","map","box","react_default","a","createElement","key","topRow","className","style","top","right","rightCol","bottom","bottomRow","left","leftCol","id","src","alt","width","height","ImageLinkForm","onInputChange","onSubmit","onChange","onClick","app","Clarifai","App","apiKey","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","calculateFaceLocation","data","clarifaiFaces","outputs","regions","face","region_info","bounding_box","image","document","getElementById","Number","calculated","length","f","left_col","top_row","right_col","bottom_row","push","displayFaceBoxes","setState","event","input","target","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","console","log","onRouteChange","route","isSignedIn","particles_default","components_ImageLinkForm_ImageLinkForm","components_FaceRecognition_FaceRecognition","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c992897a.chunk.js","sourcesContent":["const params =\n  {\n    \"fps_limit\": 28,\n    \"particles\": {\n        \"number\": {\n            \"value\": 400,\n            \"density\": {\n                \"enable\": false\n            }\n        },\n        \"line_linked\": {\n            \"enable\": true,\n            \"distance\": 30,\n            \"opacity\": 0.4,\n        },\n        \"move\": {\n            \"speed\": 1\n        },\n        \"opacity\": {\n            \"anim\": {\n                \"enable\": true,\n                \"opacity_min\": 0.05,\n                \"speed\": 2,\n                \"sync\": false\n            },\n            \"value\": 0.4\n        }\n    },\n    \"color\": {\n      \"value\": \"#82A7B2\"\n    },\n    \"polygon\": {\n        \"enable\": true,\n        \"scale\": .5,\n        \"type\": \"inline\",\n        \"move\": {\n            \"radius\": 30\n        },\n        \"url\": \"brain_03.svg\",\n        \"inline\": {\n            \"arrangement\": \"equidistant\"\n        },\n        \"draw\": {\n            \"enable\": true,\n            \"stroke\": {\n                \"color\": \"#fff\"\n            }\n        }\n    },\n    \"retina_detect\": false,\n    \"interactivity\": {\n        \"events\": {\n            \"onhover\": {\n                \"enable\": true,\n                \"mode\": \"bubble\"\n            }\n        },\n        \"modes\": {\n            \"bubble\": {\n                \"size\": 6,\n                \"distance\": 40\n            }\n        }\n  }\n}\n\nexport default params;","import React from 'react';\nimport './FaceRecognition.css';\n\nconst FaceRecognition = ({imageUrl, boxes}) => {\n\n  const faceBoxes = boxes.map((box) => {\n    return (\n      <div \n        key={box.topRow}\n        className=\"bounding-box\"\n        style={{top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol}}>\n      </div>\n    )\n  })\n  return(\n  <div className=\"center ma\">\n    <div className=\"absolute mt2\">\n      { !imageUrl ?\n      <p className=\"wait\">Brain waiting for image...</p>\n      :\n      <img className=\"input-image\" id=\"inputimage\" src={imageUrl} alt=\"hmm...well that didn't work\" width=\"500px\" height=\"auto\"/>\n        \n      }\n      {faceBoxes}\n\n    </div>\n  </div>\n  )\n}\n\nexport default FaceRecognition;\n","import React from 'react';\nimport './ImageLinkForm.css';\n\nconst ImageLinkForm = ({onInputChange, onSubmit}) => {\n  return(\n    <div className=\"link-form\">\n      <p className='f3'>\n        {'Enter a URL below. This mighty brain will detect faces!'}\n      </p>\n      <div className=\"pa4 br3 shadow-5 form center\">\n        <input className=\"f4 pa2 w-70 center\" type=\"text\" onChange={onInputChange}/>\n        <button className=\"w-30 grow f4 link ph3 dib\" onClick={onSubmit}>Detect</button>\n      </div>\n    </div>\n  );\n}\n\nexport default ImageLinkForm;","import React, { Component } from 'react';\nimport Particles from 'react-particles-js';\nimport params from './particles';\nimport Clarifai from 'clarifai';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\n\nimport './App.css';\n\n\n\nconst app = new Clarifai.App({\n  apiKey: 'bc0813e5d675435dae2c34038fcf67ca'\n});\n\nconst height = 300;\nconst width = 400;\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      input: \"\",\n      imageUrl: \"\",\n      boxes: [],\n      route: 'signin',\n    }\n  }\n\n  calculateFaceLocation = (data) => {\n    const clarifaiOutputs = data.outputs[0];\n    const clarifaiFaces = clarifaiOutputs.data.regions.map(face => face.region_info.bounding_box);\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    let calculated = [];\n\n    for (let face = 0; face<clarifaiFaces.length; face++) {\n      let f = clarifaiFaces[face];\n      let leftCol = f.left_col * width;\n      let topRow = f.top_row * height;\n      let rightCol = width - (f.right_col * width);\n      let bottomRow = height - (f.bottom_row * height)\n\n      calculated.push({leftCol, topRow, rightCol, bottomRow })\n    }\n    return calculated;\n  }\n\n  displayFaceBoxes = (boxes) => {\n    this.setState({boxes: boxes});\n  }\n  onInputChange = (event) => {\n    this.setState({input: event.target.value})\n  }\n\n  onSubmit = () => {\n    this.setState({imageUrl: this.state.input});\n    app.models\n      .predict(\n        Clarifai.FACE_DETECT_MODEL, \n        this.state.input)\n      .then(response => this.displayFaceBoxes(this.calculateFaceLocation(response)))\n      .catch(err => console.log(err));\n  }\n\n  onRouteChange = (route) => {\n    if (route === 'signout') {\n      this.setState({isSignedIn: false})\n\n    } else if (route === 'home') {\n      this.setState({isSignedIn: true})\n    }\n    this.setState({route: route})\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Particles className=\"particles\" params={params} height={height} width={width} />\n        <div>\n          <ImageLinkForm onInputChange={this.onInputChange} onSubmit={this.onSubmit}/>\n          <FaceRecognition boxes={this.state.boxes} imageUrl={this.state.imageUrl} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}